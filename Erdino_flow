#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9; // Large value representing infinite capacity

int n; // Number of nodes
vector<vector<int>> capacity; // Capacity matrix
vector<vector<int>> adj; // Adjacency list

// BFS to find an augmenting path
int bfs(int s, int t, vector<int>& parent) {
    fill(parent.begin(), parent.end(), -1);
    parent[s] = -2;
    queue<pair<int, int>> q;
    q.push({s, INF});

    while (!q.empty()) {
        int cur = q.front().first;
        int flow = q.front().second;
        q.pop();

        for (int next : adj[cur]) {
         
            if (parent[next] == -1 && capacity[cur][next] > 0) {
                parent[next] = cur;
                int new_flow = min(flow, capacity[cur][next]);
                if (next == t)
                    return new_flow; 
                q.push({next, new_flow});
            }
        }
    }

    return 0; 
}




int maxflow(int s, int t) {
    int flow = 0;
    vector<int> parent(n);
    int new_flow;

    while ((new_flow = bfs(s, t, parent))) {
        flow += new_flow;
        int cur = t;
        while (cur != s) {
            int prev = parent[cur];
            capacity[prev][cur] -= new_flow;
            capacity[cur][prev] += new_flow; 
            cur = prev;
        }
    }

    return flow;
}


int main() {
    int m; 
    cin >> n >> m; 

    capacity.assign(n, vector<int>(n, 0));
    adj.assign(n, vector<int>());

    for (int i = 0; i < m; i++) {
        int u, v, cap;
        cin >> u >> v >> cap;
        capacity[u][v] += cap; 
        adj[u].push_back(v);
        adj[v].push_back(u); 
    }

    int s, t;
    cin >> s >> t; 
    cout << "Maximum Flow: " << maxflow(s, t) << endl;

    return 0;
}
